using System;
using System.IO;
using System.IO.Compression;
using System.Threading;
using System.Transactions;
using Castle.Core;
using Castle.MicroKernel.Registration;
using Castle.Windsor;
using Rhino.Queues;
using Rhino.ServiceBus.Impl;
using Rhino.ServiceBus.Internal;
using Rhino.ServiceBus.RhinoQueues;
using Rhino.ServiceBus.Serializers;
using Rhino.ServiceBus.Tests.Bugs;
using Xunit;

namespace Rhino.ServiceBus.Tests.RhinoQueues
{
    public class CustomizingMessageConstruction
    {
        [Fact]
        public void CanCustomizeMessageBasedOnDestination()
        {
            using (var container = new WindsorContainer())
            {
                container.Register(Component.For<ICustomizeOutgoingMessages>().ImplementedBy<CustomizeByDestination>());
                new RhinoServiceBusConfiguration()
                    .UseCastleWindsor(container)
                    .UseStandaloneConfigurationFile("RhinoQueues/RhinoQueues.config")
                    .Configure();

                var builder = container.Resolve<IMessageBuilder<MessagePayload>>();
                builder.Initialize(new Endpoint { Uri = RhinoQueuesOneWayBus.NullEndpoint });
                var messageInfo = new OutgoingMessageInformation
                {
                    Destination = new Endpoint { Uri = new Uri("null://nowhere/queue?Volatile=true") },
                    Messages = new[] { "somemsg" }
                };
                var msg = builder.BuildFromMessageBatch(messageInfo);
                Assert.NotNull(msg);
                Assert.NotEqual(0, msg.Data.Length);
                Assert.Equal(2, msg.MaxAttempts);
            }
        }

        [Fact]
        public void CanCustomizeMessageBasedMessageType()
        {
            using (var container = new WindsorContainer())
            {
                container.Register(Component.For<ICustomizeOutgoingMessages>().ImplementedBy<CustomizeByMessageType>());
                new RhinoServiceBusConfiguration()
                    .UseCastleWindsor(container)
                    .UseStandaloneConfigurationFile("RhinoQueues/RhinoQueues.config")
                    .Configure();

                var builder = container.Resolve<IMessageBuilder<MessagePayload>>();
                builder.Initialize(new Endpoint { Uri = RhinoQueuesOneWayBus.NullEndpoint });
                var messageInfo = new OutgoingMessageInformation { Messages = new[] { new CustomizedMessage() } };
                var msg = builder.BuildFromMessageBatch(messageInfo);
                Assert.NotNull(msg);
                Assert.NotEqual(0, msg.Data.Length);
                Assert.Equal(1, msg.MaxAttempts);
            }
        }

        [Fact]
        public void Gzip_receive()
        {
            var container = new WindsorContainer();

            if (Directory.Exists("test.esent"))
                Directory.Delete("test.esent", true);

            if (Directory.Exists("test.esent2"))
                Directory.Delete("test.esent2", true);

            if (Directory.Exists("test_subscriptions.esent"))
                Directory.Delete("test_subscriptions.esent", true);

            UsingRhinoQueuesBus.StringConsumer.Value = null;
            UsingRhinoQueuesBus.StringConsumer.Wait = new ManualResetEvent(false);

            container = new WindsorContainer();
            container.Register(Component.For<IMessageBuilder<MessagePayload>>().ImplementedBy<CustomGzipBuilder>());//before configuration
            new RhinoServiceBusConfiguration()
                .UseCastleWindsor(container)
                .UseStandaloneConfigurationFile("RhinoQueues/RhinoQueues.config")
                .Configure();
            container.Register(
                Component.For<WhenTransactionCommitErrors_ShouldNotCrash_Msmq.ConsumerEnlistingInBadTransaction>());
            container.Register(Component.For<UsingRhinoQueuesBus.StringConsumer>());
            container.Register(Component.For<UsingRhinoQueuesBus.ThrowingIntConsumer>());
            var bus = container.Resolve<IStartableServiceBus>();
            bus.Start();

            using (var tx = new TransactionScope())
            {
                bus.Send(bus.Endpoint, "3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d227574662d38223f3e0d0a3c6573623a6d6573736167657320786d6c6e733a6573623d22687474703a2f2f736572766963656275732e68696265726e6174696e677268696e6f732e636f6d2f323030382f31322f32302f6573622220786d6c6e733a656e7469746965732e6361736867616d6573657373696f6e3d22446f6d61696e4d6f64656c2e456e7469746965732e4361736847616d6553657373696f6e2c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e4461746554696d653d2253797374656d2e4461746554696d652220786d6c6e733a53797374656d2e537472696e673d2253797374656d2e537472696e672220786d6c6e733a53797374656d2e477569643d2253797374656d2e477569642220786d6c6e733a656e7469746965732e757365723d22446f6d61696e4d6f64656c2e456e7469746965732e557365722c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e496e7433323d2253797374656d2e496e7433322220786d6c6e733a656e7469746965732e75736572747970653d22446f6d61696e4d6f64656c2e456e7469746965732e557365722b55736572547970652c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e446563696d616c3d2253797374656d2e446563696d616c2220786d6c6e733a67656e657269632e6c6973745f6f665f656e7469746965732e62616c616e63656368616e67653d2253797374656d2e436f6c6c656374696f6e732e47656e657269632e4c69737460315b5b446f6d61696e4d6f64656c2e456e7469746965732e42616c616e63654368616e67652c20446f6d61696e4d6f64656c5d5d2c206d73636f726c69622c2056657273696f6e3d322e302e302e302c2043756c747572653d6e65757472616c2c205075626c69634b6579546f6b656e3d623737613563353631393334653038392220786d6c6e733a53797374656d2e426f6f6c65616e3d2253797374656d2e426f6f6c65616e223e0d0a20203c656e7469746965732e6361736867616d6573657373696f6e3a4361736847616d6553657373696f6e3e0d0a202020203c56616c75652069763d2230504e56446251634c6d457a4578355152424e6a79773d3d2220786d6c6e733d22737472696e67223e726c3243334630525752366e59637650364161354d5a667846584335525444594a4c6e754c37313453397676697446537a32453335574f4c616b73557441627a7a756c7a776977576b715775326c4c55473175567635327a667535544a6e656e377446694e367573754b426c5638737852395674476c61766262364e7963795273656e4c3743392b4a48317a766553334e6a61334a624643437557344a416357566c46664d4955663766724168783878496f47344f705555657477394d626531397464304a6f7653506a4650744e336569544877682f59435a7a4a694e3673564b4e2f336951675444564a2f52444258515a777168504b396e43666e6e44547a4377334261776e63576e3553795068515a4f324e566c3554345269437872786e4e2f7538714d384a572f7a564b4e64416c4867586e75454366672b506c46634442754c4444516571454f4165746e626b2f6a613468592f4e493745392f3856464c4950304879447868424d5a2b4c49664877317061447a6f57504a6c3735486f7a36774d3143327a545650524b7671555066737141623151556f32546f367563744336744d686a5963626d546830777a7a71656f4b757866435030447746774f74396c766a5871646a3075435a624c2b707a5256455765686a7a57304b6f776c4865372f63724d72433965346979563849354e77766c526a7274642f4c43425956734a49455a7072756e72454d4145514f71614b3942514552304a5638726d7759522b4c4876777848555876776b5661565174432b5a54546c2b343273422b6f55375138472b636475654f732f416e72467134672f326d32355769597966302b434b71383279426c56324252334b3035646556446c475a6a683339446b343350385a76316f2b3877444b446d5338796364336b4a395a2b4c796e7735746f684a3857616a6952344c44593456696f34717538646d517769775373636c34612f456a425848524d6f7a364b4b44312f686d794d56444d2b694e4e744879554b365243317665656a4d48507659736e4b556b62554e376f706d6f353869654c525670766778426d436a694d4e7256526762716236596d30736b626a4141566d456168696d385a6d33394a54336b76436e356a616d63686a546d64347468477931504c66364f59704c6948434533785445707747795a4d784d70412f67347457516d5268676d693771505849413765667150397772797362685641646e49626b764b4f393736443753303350346b734e47766d44317731444c64685832536c786a6d49505675497666325052395734536352435967566950536378556d78386d537a534b4d694a4348764e334a4a4a32454b686f31304c763142427a6e35374e516970682f3874567943643077332b79514f77717979576d524437302b333172307a6c61346d2b495445426c7676485a7450487a6a4964556d33326d4239365a565043517768457736436d6344385a5a2f6c49736e4c586a6f4863725342764776515534627757554f61424b56744541735834714b6e582f524b6c36703351426f4a50476334374651775a4a504152592f6e556f62447763416e38764158354d715344414b76386e6b78596c6f5a616f6f50773335324d6767344a596430396847374b4b73756f66464c74494d6f574e322b304873496f5265523670457963474b6a664a672b366f4c574f3248435849475763793275653479306e7533487a69674f30486a76533044496735626a31633633576d32516d706b4c4f6e537065424c67333370656c762b3857657371646f794765687344374e35544463733253444f31476f4d796d525172376968334d74535965727a6148526353716b61704137617738473071426a30414e4a556c486e53546e476f2b4c44794a5774664f6c623944617463625667445032416970636578773668674c2f4665396e6368564445596564446f43646e4853786d4b5356514149664d76546e41506e2f527a6b586b2f5971324164644471716f7a397a794a7a6d6b48444c304634727575503165366c72454257453730712f4d49684c4347336344596d6569357032484a4d3264487470476d6b314e6b466a6c2f67454c317a546436463136715364303345586c7772746779725230674e446b7a65474e79497664376833557573786e4272612f5267726b2f794f516b6a3649683133556662526951423765464166537573674e434634437441384867705a384335383168615944474f67446165636b6344346b437932326e5a7061555131702b6e616462504a7261594f75796870465167594631637a6f396b4b62632f434d57363476775a2b547747674c7a3458617262425451465967412b52587378386e484b436170674d71546b52327446797a746b7a774443786f6255664a52324b34342f633648766364736149752f3952774a394c73372b632b43314e49325861706d5a3759713843376345677a6265726a4141444b434d324e6f4767464932666563763755324854574f666d4c6d6932516e517979674c6e645972362f466d76764d504a385230366434756c4639716738622f4e6c302b4e5842673853354277666d5a6d67552f6c476a636d5473754c456f6637433449537435696a47797a523876575953413979476f4b4537472b4869346159556263714c694e365843376364656e57363263572f3131766a32734235544d3745675a33742b3779326f4372465a625547643334646856392f73374e414e564a587837664f43684e6d394645434e39713141672b6a56644b65342f592f375354654d3376547255554254673472616c53486d65534634696d5759424f796c435038574174547a38444d5879484349425664436139696f36656c49414a71533564744e3151352f4a3073564a4d4565683968462f6d34384c5367763863554430375046584d5a6a6d6a6248572b6c5675674e355850384553655150346934432b5852553943475073464f687a435355314742664c70314d744867726342437064767572556c2b69504745794974554a2f4e2f6e715837376e72504250396f50482b65506e656c4d476467476c41582b337764706658694f327a665871554841706a796d54736d7730496e4a6436547142556b4f664e5a68414b466e4361637454454744494f4c2b436874357a57753658516852357a4d686d736b436430796236332f6e6433735130757859664a776147395233643676612f6f7a5a74554a6f7563433559364a573561505368704a6c6f47484f3068397769537947596265506c5a584659336d44314f752b31516358546d303873386d4e77685147354d6e715a4965424664656c6e544b6d7a61557961626b464845663372324256682f703870554e7078393238583161736e4e4e33317241565a43766a4f3252754c6d464e78455a4c754343647542505167446b34717474712b5a784d4572617a3976466969646a51596159652b45726b50395656614b6a4563733552582f686a576b52476759646150312f73494d514c49544e3553474d52764d44415a38574476696758454b4233545862575a522f677133323078756b6b694778366d6d746f573353556971476a49394f624b4d504d5a6850597441756838416c327338794e3365683366325533665a536754554d682b6b5763446855393573537a6a58586556446143486b4338785573735061546a7944553536567233574953433677354f4b426d38362b7650466f545267472b6c79384944336c3946365675476b5474716d37795537795a766f4e71576e7675507245416e434c62792b6130472f4b646470617a734673756f744543716c637a724235326c676d6a6d6c6f325371482b68765a5a2b66466436494c4c725a6d7355355a396b7a2f3350534673317a3954504a742b7846486a57453052674e79776e306e4e426248694a4b3548753237533848556f51457932573949727478346272424f554947307573503843716c425a4441355957657770742b555648676c69687044746373705464412b75443750476d314c2b45384637327372396c4e67312f4974514235623469386172352f68666e544a793335447879662b7164375646485767456c4842466547556b2b6172374e42302b794f646858613168476b3364634a6161612f50786d4b4b3249414779697a362f48727a486b5837345174764c6b3442686a397266364137644549463138773d3d3c2f56616c75653e0d0a20203c2f656e7469746965732e6361736867616d6573657373696f6e3a4361736847616d6553657373696f6e3e0d0a3c2f6573623a6d657373616765733e");

                tx.Complete();
            }

            Assert.True(UsingRhinoQueuesBus.StringConsumer.Wait.WaitOne(TimeSpan.FromSeconds(100), false));

            Assert.Equal("3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d227574662d38223f3e0d0a3c6573623a6d6573736167657320786d6c6e733a6573623d22687474703a2f2f736572766963656275732e68696265726e6174696e677268696e6f732e636f6d2f323030382f31322f32302f6573622220786d6c6e733a656e7469746965732e6361736867616d6573657373696f6e3d22446f6d61696e4d6f64656c2e456e7469746965732e4361736847616d6553657373696f6e2c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e4461746554696d653d2253797374656d2e4461746554696d652220786d6c6e733a53797374656d2e537472696e673d2253797374656d2e537472696e672220786d6c6e733a53797374656d2e477569643d2253797374656d2e477569642220786d6c6e733a656e7469746965732e757365723d22446f6d61696e4d6f64656c2e456e7469746965732e557365722c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e496e7433323d2253797374656d2e496e7433322220786d6c6e733a656e7469746965732e75736572747970653d22446f6d61696e4d6f64656c2e456e7469746965732e557365722b55736572547970652c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e446563696d616c3d2253797374656d2e446563696d616c2220786d6c6e733a67656e657269632e6c6973745f6f665f656e7469746965732e62616c616e63656368616e67653d2253797374656d2e436f6c6c656374696f6e732e47656e657269632e4c69737460315b5b446f6d61696e4d6f64656c2e456e7469746965732e42616c616e63654368616e67652c20446f6d61696e4d6f64656c5d5d2c206d73636f726c69622c2056657273696f6e3d322e302e302e302c2043756c747572653d6e65757472616c2c205075626c69634b6579546f6b656e3d623737613563353631393334653038392220786d6c6e733a53797374656d2e426f6f6c65616e3d2253797374656d2e426f6f6c65616e223e0d0a20203c656e7469746965732e6361736867616d6573657373696f6e3a4361736847616d6553657373696f6e3e0d0a202020203c56616c75652069763d2230504e56446251634c6d457a4578355152424e6a79773d3d2220786d6c6e733d22737472696e67223e726c3243334630525752366e59637650364161354d5a667846584335525444594a4c6e754c37313453397676697446537a32453335574f4c616b73557441627a7a756c7a776977576b715775326c4c55473175567635327a667535544a6e656e377446694e367573754b426c5638737852395674476c61766262364e7963795273656e4c3743392b4a48317a766553334e6a61334a624643437557344a416357566c46664d4955663766724168783878496f47344f705555657477394d626531397464304a6f7653506a4650744e336569544877682f59435a7a4a694e3673564b4e2f336951675444564a2f52444258515a777168504b396e43666e6e44547a4377334261776e63576e3553795068515a4f324e566c3554345269437872786e4e2f7538714d384a572f7a564b4e64416c4867586e75454366672b506c46634442754c4444516571454f4165746e626b2f6a613468592f4e493745392f3856464c4950304879447868424d5a2b4c49664877317061447a6f57504a6c3735486f7a36774d3143327a545650524b7671555066737141623151556f32546f367563744336744d686a5963626d546830777a7a71656f4b757866435030447746774f74396c766a5871646a3075435a624c2b707a5256455765686a7a57304b6f776c4865372f63724d72433965346979563849354e77766c526a7274642f4c43425956734a49455a7072756e72454d4145514f71614b3942514552304a5638726d7759522b4c4876777848555876776b5661565174432b5a54546c2b343273422b6f55375138472b636475654f732f416e72467134672f326d32355769597966302b434b71383279426c56324252334b3035646556446c475a6a683339446b343350385a76316f2b3877444b446d5338796364336b4a395a2b4c796e7735746f684a3857616a6952344c44593456696f34717538646d517769775373636c34612f456a425848524d6f7a364b4b44312f686d794d56444d2b694e4e744879554b365243317665656a4d48507659736e4b556b62554e376f706d6f353869654c525670766778426d436a694d4e7256526762716236596d30736b626a4141566d456168696d385a6d33394a54336b76436e356a616d63686a546d64347468477931504c66364f59704c6948434533785445707747795a4d784d70412f67347457516d5268676d693771505849413765667150397772797362685641646e49626b764b4f393736443753303350346b734e47766d44317731444c64685832536c786a6d49505675497666325052395734536352435967566950536378556d78386d537a534b4d694a4348764e334a4a4a32454b686f31304c763142427a6e35374e516970682f3874567943643077332b79514f77717979576d524437302b333172307a6c61346d2b495445426c7676485a7450487a6a4964556d33326d4239365a565043517768457736436d6344385a5a2f6c49736e4c586a6f4863725342764776515534627757554f61424b56744541735834714b6e582f524b6c36703351426f4a50476334374651775a4a504152592f6e556f62447763416e38764158354d715344414b76386e6b78596c6f5a616f6f50773335324d6767344a596430396847374b4b73756f66464c74494d6f574e322b304873496f5265523670457963474b6a664a672b366f4c574f3248435849475763793275653479306e7533487a69674f30486a76533044496735626a31633633576d32516d706b4c4f6e537065424c67333370656c762b3857657371646f794765687344374e35544463733253444f31476f4d796d525172376968334d74535965727a6148526353716b61704137617738473071426a30414e4a556c486e53546e476f2b4c44794a5774664f6c623944617463625667445032416970636578773668674c2f4665396e6368564445596564446f43646e4853786d4b5356514149664d76546e41506e2f527a6b586b2f5971324164644471716f7a397a794a7a6d6b48444c304634727575503165366c72454257453730712f4d49684c4347336344596d6569357032484a4d3264487470476d6b314e6b466a6c2f67454c317a546436463136715364303345586c7772746779725230674e446b7a65474e79497664376833557573786e4272612f5267726b2f794f516b6a3649683133556662526951423765464166537573674e434634437441384867705a384335383168615944474f67446165636b6344346b437932326e5a7061555131702b6e616462504a7261594f75796870465167594631637a6f396b4b62632f434d57363476775a2b547747674c7a3458617262425451465967412b52587378386e484b436170674d71546b52327446797a746b7a774443786f6255664a52324b34342f633648766364736149752f3952774a394c73372b632b43314e49325861706d5a3759713843376345677a6265726a4141444b434d324e6f4767464932666563763755324854574f666d4c6d6932516e517979674c6e645972362f466d76764d504a385230366434756c4639716738622f4e6c302b4e5842673853354277666d5a6d67552f6c476a636d5473754c456f6637433449537435696a47797a523876575953413979476f4b4537472b4869346159556263714c694e365843376364656e57363263572f3131766a32734235544d3745675a33742b3779326f4372465a625547643334646856392f73374e414e564a587837664f43684e6d394645434e39713141672b6a56644b65342f592f375354654d3376547255554254673472616c53486d65534634696d5759424f796c435038574174547a38444d5879484349425664436139696f36656c49414a71533564744e3151352f4a3073564a4d4565683968462f6d34384c5367763863554430375046584d5a6a6d6a6248572b6c5675674e355850384553655150346934432b5852553943475073464f687a435355314742664c70314d744867726342437064767572556c2b69504745794974554a2f4e2f6e715837376e72504250396f50482b65506e656c4d476467476c41582b337764706658694f327a665871554841706a796d54736d7730496e4a6436547142556b4f664e5a68414b466e4361637454454744494f4c2b436874357a57753658516852357a4d686d736b436430796236332f6e6433735130757859664a776147395233643676612f6f7a5a74554a6f7563433559364a573561505368704a6c6f47484f3068397769537947596265506c5a584659336d44314f752b31516358546d303873386d4e77685147354d6e715a4965424664656c6e544b6d7a61557961626b464845663372324256682f703870554e7078393238583161736e4e4e33317241565a43766a4f3252754c6d464e78455a4c754343647542505167446b34717474712b5a784d4572617a3976466969646a51596159652b45726b50395656614b6a4563733552582f686a576b52476759646150312f73494d514c49544e3553474d52764d44415a38574476696758454b4233545862575a522f677133323078756b6b694778366d6d746f573353556971476a49394f624b4d504d5a6850597441756838416c327338794e3365683366325533665a536754554d682b6b5763446855393573537a6a58586556446143486b4338785573735061546a7944553536567233574953433677354f4b426d38362b7650466f545267472b6c79384944336c3946365675476b5474716d37795537795a766f4e71576e7675507245416e434c62792b6130472f4b646470617a734673756f744543716c637a724235326c676d6a6d6c6f325371482b68765a5a2b66466436494c4c725a6d7355355a396b7a2f3350534673317a3954504a742b7846486a57453052674e79776e306e4e426248694a4b3548753237533848556f51457932573949727478346272424f554947307573503843716c425a4441355957657770742b555648676c69687044746373705464412b75443750476d314c2b45384637327372396c4e67312f4974514235623469386172352f68666e544a793335447879662b7164375646485767456c4842466547556b2b6172374e42302b794f646858613168476b3364634a6161612f50786d4b4b3249414779697a362f48727a486b5837345174764c6b3442686a397266364137644549463138773d3d3c2f56616c75653e0d0a20203c2f656e7469746965732e6361736867616d6573657373696f6e3a4361736847616d6553657373696f6e3e0d0a3c2f6573623a6d657373616765733e", UsingRhinoQueuesBus.StringConsumer.Value);

        }

        [Fact]
        public void Gzip()
        {
            using (var container = new WindsorContainer())
            {
                container.Register(Component.For<IMessageBuilder<MessagePayload>>().ImplementedBy<CustomGzipBuilder>());//before configuration
                new RhinoServiceBusConfiguration()
                    .UseCastleWindsor(container)
                    .UseStandaloneConfigurationFile("RhinoQueues/RhinoQueues.config")
                    .Configure();

                var builder = container.Resolve<IMessageBuilder<MessagePayload>>();
                builder.Initialize(new Endpoint { Uri = RhinoQueuesOneWayBus.NullEndpoint });
                var messageInfo = new OutgoingMessageInformation { Messages = new[] { "3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d227574662d38223f3e0d0a3c6573623a6d6573736167657320786d6c6e733a6573623d22687474703a2f2f736572766963656275732e68696265726e6174696e677268696e6f732e636f6d2f323030382f31322f32302f6573622220786d6c6e733a656e7469746965732e6361736867616d6573657373696f6e3d22446f6d61696e4d6f64656c2e456e7469746965732e4361736847616d6553657373696f6e2c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e4461746554696d653d2253797374656d2e4461746554696d652220786d6c6e733a53797374656d2e537472696e673d2253797374656d2e537472696e672220786d6c6e733a53797374656d2e477569643d2253797374656d2e477569642220786d6c6e733a656e7469746965732e757365723d22446f6d61696e4d6f64656c2e456e7469746965732e557365722c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e496e7433323d2253797374656d2e496e7433322220786d6c6e733a656e7469746965732e75736572747970653d22446f6d61696e4d6f64656c2e456e7469746965732e557365722b55736572547970652c20446f6d61696e4d6f64656c2220786d6c6e733a53797374656d2e446563696d616c3d2253797374656d2e446563696d616c2220786d6c6e733a67656e657269632e6c6973745f6f665f656e7469746965732e62616c616e63656368616e67653d2253797374656d2e436f6c6c656374696f6e732e47656e657269632e4c69737460315b5b446f6d61696e4d6f64656c2e456e7469746965732e42616c616e63654368616e67652c20446f6d61696e4d6f64656c5d5d2c206d73636f726c69622c2056657273696f6e3d322e302e302e302c2043756c747572653d6e65757472616c2c205075626c69634b6579546f6b656e3d623737613563353631393334653038392220786d6c6e733a53797374656d2e426f6f6c65616e3d2253797374656d2e426f6f6c65616e223e0d0a20203c656e7469746965732e6361736867616d6573657373696f6e3a4361736847616d6553657373696f6e3e0d0a202020203c56616c75652069763d2230504e56446251634c6d457a4578355152424e6a79773d3d2220786d6c6e733d22737472696e67223e726c3243334630525752366e59637650364161354d5a667846584335525444594a4c6e754c37313453397676697446537a32453335574f4c616b73557441627a7a756c7a776977576b715775326c4c55473175567635327a667535544a6e656e377446694e367573754b426c5638737852395674476c61766262364e7963795273656e4c3743392b4a48317a766553334e6a61334a624643437557344a416357566c46664d4955663766724168783878496f47344f705555657477394d626531397464304a6f7653506a4650744e336569544877682f59435a7a4a694e3673564b4e2f336951675444564a2f52444258515a777168504b396e43666e6e44547a4377334261776e63576e3553795068515a4f324e566c3554345269437872786e4e2f7538714d384a572f7a564b4e64416c4867586e75454366672b506c46634442754c4444516571454f4165746e626b2f6a613468592f4e493745392f3856464c4950304879447868424d5a2b4c49664877317061447a6f57504a6c3735486f7a36774d3143327a545650524b7671555066737141623151556f32546f367563744336744d686a5963626d546830777a7a71656f4b757866435030447746774f74396c766a5871646a3075435a624c2b707a5256455765686a7a57304b6f776c4865372f63724d72433965346979563849354e77766c526a7274642f4c43425956734a49455a7072756e72454d4145514f71614b3942514552304a5638726d7759522b4c4876777848555876776b5661565174432b5a54546c2b343273422b6f55375138472b636475654f732f416e72467134672f326d32355769597966302b434b71383279426c56324252334b3035646556446c475a6a683339446b343350385a76316f2b3877444b446d5338796364336b4a395a2b4c796e7735746f684a3857616a6952344c44593456696f34717538646d517769775373636c34612f456a425848524d6f7a364b4b44312f686d794d56444d2b694e4e744879554b365243317665656a4d48507659736e4b556b62554e376f706d6f353869654c525670766778426d436a694d4e7256526762716236596d30736b626a4141566d456168696d385a6d33394a54336b76436e356a616d63686a546d64347468477931504c66364f59704c6948434533785445707747795a4d784d70412f67347457516d5268676d693771505849413765667150397772797362685641646e49626b764b4f393736443753303350346b734e47766d44317731444c64685832536c786a6d49505675497666325052395734536352435967566950536378556d78386d537a534b4d694a4348764e334a4a4a32454b686f31304c763142427a6e35374e516970682f3874567943643077332b79514f77717979576d524437302b333172307a6c61346d2b495445426c7676485a7450487a6a4964556d33326d4239365a565043517768457736436d6344385a5a2f6c49736e4c586a6f4863725342764776515534627757554f61424b56744541735834714b6e582f524b6c36703351426f4a50476334374651775a4a504152592f6e556f62447763416e38764158354d715344414b76386e6b78596c6f5a616f6f50773335324d6767344a596430396847374b4b73756f66464c74494d6f574e322b304873496f5265523670457963474b6a664a672b366f4c574f3248435849475763793275653479306e7533487a69674f30486a76533044496735626a31633633576d32516d706b4c4f6e537065424c67333370656c762b3857657371646f794765687344374e35544463733253444f31476f4d796d525172376968334d74535965727a6148526353716b61704137617738473071426a30414e4a556c486e53546e476f2b4c44794a5774664f6c623944617463625667445032416970636578773668674c2f4665396e6368564445596564446f43646e4853786d4b5356514149664d76546e41506e2f527a6b586b2f5971324164644471716f7a397a794a7a6d6b48444c304634727575503165366c72454257453730712f4d49684c4347336344596d6569357032484a4d3264487470476d6b314e6b466a6c2f67454c317a546436463136715364303345586c7772746779725230674e446b7a65474e79497664376833557573786e4272612f5267726b2f794f516b6a3649683133556662526951423765464166537573674e434634437441384867705a384335383168615944474f67446165636b6344346b437932326e5a7061555131702b6e616462504a7261594f75796870465167594631637a6f396b4b62632f434d57363476775a2b547747674c7a3458617262425451465967412b52587378386e484b436170674d71546b52327446797a746b7a774443786f6255664a52324b34342f633648766364736149752f3952774a394c73372b632b43314e49325861706d5a3759713843376345677a6265726a4141444b434d324e6f4767464932666563763755324854574f666d4c6d6932516e517979674c6e645972362f466d76764d504a385230366434756c4639716738622f4e6c302b4e5842673853354277666d5a6d67552f6c476a636d5473754c456f6637433449537435696a47797a523876575953413979476f4b4537472b4869346159556263714c694e365843376364656e57363263572f3131766a32734235544d3745675a33742b3779326f4372465a625547643334646856392f73374e414e564a587837664f43684e6d394645434e39713141672b6a56644b65342f592f375354654d3376547255554254673472616c53486d65534634696d5759424f796c435038574174547a38444d5879484349425664436139696f36656c49414a71533564744e3151352f4a3073564a4d4565683968462f6d34384c5367763863554430375046584d5a6a6d6a6248572b6c5675674e355850384553655150346934432b5852553943475073464f687a435355314742664c70314d744867726342437064767572556c2b69504745794974554a2f4e2f6e715837376e72504250396f50482b65506e656c4d476467476c41582b337764706658694f327a665871554841706a796d54736d7730496e4a6436547142556b4f664e5a68414b466e4361637454454744494f4c2b436874357a57753658516852357a4d686d736b436430796236332f6e6433735130757859664a776147395233643676612f6f7a5a74554a6f7563433559364a573561505368704a6c6f47484f3068397769537947596265506c5a584659336d44314f752b31516358546d303873386d4e77685147354d6e715a4965424664656c6e544b6d7a61557961626b464845663372324256682f703870554e7078393238583161736e4e4e33317241565a43766a4f3252754c6d464e78455a4c754343647542505167446b34717474712b5a784d4572617a3976466969646a51596159652b45726b50395656614b6a4563733552582f686a576b52476759646150312f73494d514c49544e3553474d52764d44415a38574476696758454b4233545862575a522f677133323078756b6b694778366d6d746f573353556971476a49394f624b4d504d5a6850597441756838416c327338794e3365683366325533665a536754554d682b6b5763446855393573537a6a58586556446143486b4338785573735061546a7944553536567233574953433677354f4b426d38362b7650466f545267472b6c79384944336c3946365675476b5474716d37795537795a766f4e71576e7675507245416e434c62792b6130472f4b646470617a734673756f744543716c637a724235326c676d6a6d6c6f325371482b68765a5a2b66466436494c4c725a6d7355355a396b7a2f3350534673317a3954504a742b7846486a57453052674e79776e306e4e426248694a4b3548753237533848556f51457932573949727478346272424f554947307573503843716c425a4441355957657770742b555648676c69687044746373705464412b75443750476d314c2b45384637327372396c4e67312f4974514235623469386172352f68666e544a793335447879662b7164375646485767456c4842466547556b2b6172374e42302b794f646858613168476b3364634a6161612f50786d4b4b3249414779697a362f48727a486b5837345174764c6b3442686a397266364137644549463138773d3d3c2f56616c75653e0d0a20203c2f656e7469746965732e6361736867616d6573657373696f6e3a4361736847616d6553657373696f6e3e0d0a3c2f6573623a6d657373616765733e" } };
                var msg = builder.BuildFromMessageBatch(messageInfo);
                Assert.NotNull(msg);
                Assert.NotEqual(0, msg.Data.Length);
                Assert.Equal("true", msg.Headers["IWasCompressed"]);
            }

        }

        [Fact]
        public void it_should_add_custom_header_to_headers_collection_using_builder()
        {
            using (var container = new WindsorContainer())
            {
                container.Register(Component.For<IMessageBuilder<MessagePayload>>().ImplementedBy<CustomHeaderBuilder>());//before configuration
                new RhinoServiceBusConfiguration()
                    .UseCastleWindsor(container)
                    .UseStandaloneConfigurationFile("RhinoQueues/RhinoQueues.config")
                    .Configure();

                var builder = container.Resolve<IMessageBuilder<MessagePayload>>();
                builder.Initialize(new Endpoint { Uri = RhinoQueuesOneWayBus.NullEndpoint });
                var messageInfo = new OutgoingMessageInformation { Messages = new[] { "somemsg" } };
                var msg = builder.BuildFromMessageBatch(messageInfo);
                Assert.NotNull(msg);
                Assert.NotEqual(0, msg.Data.Length);
                Assert.Equal("mikey", msg.Headers["user-id"]);
            }

        }

        [Fact]
        public void it_should_add_custom_header_to_headers_collection_using_interface()
        {
            using (var container = new WindsorContainer())
            {
                container.Register(Component.For<ICustomizeOutgoingMessages>().ImplementedBy<AppIdentityCustomizer>().LifeStyle.Is(LifestyleType.Transient));
                new RhinoServiceBusConfiguration()
                    .UseCastleWindsor(container)
                    .UseStandaloneConfigurationFile("RhinoQueues/RhinoQueues.config")
                    .Configure();

                var builder = container.Resolve<IMessageBuilder<MessagePayload>>();
                builder.Initialize(new Endpoint { Uri = RhinoQueuesOneWayBus.NullEndpoint });
                var messageInfo = new OutgoingMessageInformation { Messages = new[] { "somemsg" } };
                var msg = builder.BuildFromMessageBatch(messageInfo);
                Assert.NotNull(msg);
                Assert.NotEqual(0, msg.Data.Length);
                Assert.Equal("mikey", msg.Headers["user-id"]);
            }

        }

        [CLSCompliant(false)]
        public class CustomGzipBuilder : IMessageBuilder<MessagePayload>
        {
            private IMessageBuilder<MessagePayload> inner;

            public CustomGzipBuilder(IMessageBuilder<MessagePayload> inner)
            {
                this.inner = inner;
            }

            public event Action<MessagePayload> MessageBuilt;

            public MessagePayload BuildFromMessageBatch(OutgoingMessageInformation messageInformation)
            {
                var payload = inner.BuildFromMessageBatch(messageInformation);

                CompressData(payload);

                if (MessageBuilt != null)
                    MessageBuilt(payload);
                return payload;
            }

            public void Initialize(Endpoint source)
            {
                inner.Initialize(source);
            }
            private static void CompressData(MessagePayload message)
            {
                Console.WriteLine("message.Data size before compression: " + message.Data.Length);
                var mStream = new MemoryStream(message.Data);
                var outStream = new MemoryStream();

                using (var tinyStream = new GZipStream(outStream, CompressionMode.Compress))
                {
                    mStream.CopyTo(tinyStream);
                }
                // copy the compressed buffer only after the GZipStream is disposed, 
                // otherwise, not all the compressed message will be copied.
                message.Data = outStream.ToArray();
                Console.WriteLine("message.Data size after compression: " + message.Data.Length);

                message.Headers["IWasCompressed"] = "true";

            }
        }

        [CLSCompliant(false)]
        public class CustomHeaderBuilder : IMessageBuilder<MessagePayload>
        {
            private IMessageBuilder<MessagePayload> inner;

            public CustomHeaderBuilder(IMessageBuilder<MessagePayload> inner)
            {
                this.inner = inner;
            }

            public event Action<MessagePayload> MessageBuilt;

            public MessagePayload BuildFromMessageBatch(OutgoingMessageInformation messageInformation)
            {
                var payload = inner.BuildFromMessageBatch(messageInformation);

                Contextualize(payload);

                if (MessageBuilt != null)
                    MessageBuilt(payload);
                return payload;
            }

            public void Initialize(Endpoint source)
            {
                inner.Initialize(source);
            }

            private static void Contextualize(MessagePayload message)
            {
                message.Headers.Add("user-id", "mikey");
            }
        }

        public class AppIdentityCustomizer : ICustomizeOutgoingMessages
        {
            public void Customize(OutgoingMessageInformation messageInformation)
            {
                messageInformation.Headers.Add("user-id", "mikey");
            }
        }

        public class CustomizeByDestination : ICustomizeOutgoingMessages
        {
            public void Customize(OutgoingMessageInformation messageInformation)
            {
                if (messageInformation.Destination != null
                    && messageInformation.Destination.Uri.Query.Contains("Volatile"))
                {
                    messageInformation.MaxAttempts = 2;
                }
            }
        }

        public class CustomizeGzip : ICustomizeOutgoingMessages
        {
            public void Customize(OutgoingMessageInformation messageInformation)
            {
                if (messageInformation.Destination != null
                    && messageInformation.Destination.Uri.Query.Contains("Volatile"))
                {
                    messageInformation.MaxAttempts = 2;

                }
            }
        }

        public class CustomizeByMessageType : ICustomizeOutgoingMessages
        {
            public void Customize(OutgoingMessageInformation messageInformation)
            {
                if (messageInformation.Messages[0] is ICustomizeMessageByType)
                {
                    messageInformation.MaxAttempts = 1;
                }
            }
        }

        public interface ICustomizeMessageByType
        {
        }

        public class CustomizedMessage : ICustomizeMessageByType
        {
        }
    }
}